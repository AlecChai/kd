<?php/** * 沃尔玛采集数据平台控制器 */class Walmart extends MY_Controller{    public function __construct(){        parent::__construct();        $this->load->database();        $this->userinfo = $this->db->select('*,realname as name')->where('id',$_SESSION['id'])->get('t_user')->row_array();    }    public function set(){        $where = "1=1";        if(isset($_POST['type']) && is_numeric($_POST['type']) && $_POST['type']>=0){            $where .= " AND type={$_POST['type']}";        }        $users_id = [];        if(!empty($_POST['author_name'])){          $users = $this->db->query("SELECT `id`, `username` FROM `t_user` WHERE `username` LIKE '%{$_POST['author_name']}%'")->result_array();          $users_id = $users?array_column($users, 'id'):[0];        }        if($users_id){            $where .= " AND author_id IN (".implode(',', $users_id).")";        }        $currentpage = element('currentPage', $_POST, 1);        $pagesize = element('pageSize', $_POST, 10);        $page = ($currentpage - 1) * $pagesize;        $rows = $this->db->limit($pagesize, $page)->where($where)->order_by('id','desc')->get('t_walmart_set')->result_array();        $users = $this->db->select('id,username')->get('t_user')->result_array();        $users = array_column($users,'username', 'id');        $count = $this->db->where($where)->count_all_results('t_walmart_set');        foreach($rows as &$v){            $v['author_name'] = isset($users[$v['author_id']])?$users[$v['author_id']]:'';            $v['last_time']   = !empty($v['last_time'])?date('Y-m-d H:i:s',$v['last_time']):'';        }        $data['data'] = $rows;        $data['total'] = intval($count);                echo json_encode($data);        exit;    }    public function setAdd(){        if($post = $this->input->post(NULL,true)){            $data['url']        = trim($post['url']);            $data['type']       = $post['type'];            $data['created_at'] = date('Y-m-d H:i:s');            $data['author_id']  = $this->userinfo['id'];            if($this->db->insert('t_walmart_set',$data)){                re_json([], 0, '新增成功');            }else{                re_json([], 1, '新增失败');            }        }    }    public function setEdit(){        if($post = $this->input->post(NULL,true)){            $data['url']        = trim($post['url']);            $data['type']       = $post['type'];            $data['updated_at'] = date('Y-m-d H:i:s');            if($this->db->where(['id'=>$post['id']])->update('t_walmart_set',$data)){                $this->db->where(['walmart_id'=>$post['id']])->update('t_walmart_goods',['updated_at'=>$data['updated_at'],'type'=>$data['type']]);                re_json([], 0, '编辑成功');            }else{                re_json([], 1, '编辑失败');            }        }    }    public function setDel(){        $post = $this->input->post(NULL,true);        if($this->db->where(['walmart_id'=>$post['id']])->select('id')->get('t_walmart_goods')->result()){            re_json([], 1, '已经存在产品，不能删除');        }elseif($this->db->where(['id'=>$post['id']])->delete('t_walmart_set')){            re_json([], 0, '删除成功');        }else{            re_json([], 1, '删除失败');        }    }    public function setDelAll(){        $post = $this->input->post(NULL,true);        if($this->db->where_in('walmart_id',$post['id'])->select('id')->get('t_walmart_goods')->result()){            $res['code']   =0;            re_json([], 1, '已经存在产品，不能删除');        }elseif($this->db->where_in('id',$post['id'])->delete('t_walmart_set')){            re_json([], 0, '删除成功');        }else{            re_json([], 1, '删除失败');        }    }    public function setStatus(){        $post = $this->input->post(NULL,true);        $status = $post['status']?0:1;        if($this->db->where(['id'=>$post['id']])->update('t_walmart_set',['status'=>$status])){            re_json([], 0, '设置状态成功');        }else{            re_json([], 0, '设置状态失败');        }    }    public function goods(){        $params = $this->input->post(NULL,true);        $where = "1=1";        if(isset($params['type']) && is_numeric($params['type']) && $params['type']>-1){            $where .= " AND type={$params['type']}";        }        if(isset($params['is_owner']) && is_numeric($params['is_owner']) && $params['is_owner']>-1){            $where .= " AND is_owner={$params['is_owner']}";        }        if(!empty($params['keyword'])){            $sku = $this->db->query("SELECT `goods_id`, `sku` FROM `t_walmart_goods_developer` WHERE `sku` LIKE '%{$params['keyword']}%'")->result_array();            $goods_id_arr = array_column($sku, 'id');            $goods_id = $goods_id_arr?$goods_id_arr:[0];            $where .= " AND ( name LIKE '%".$params['keyword']."%' OR brand_name LIKE '%".$params['keyword']."%' OR goods_code LIKE '%".$params['keyword']."%' OR id IN (".implode(',',array_unique($goods_id))."))";        }        $sale_sql  = '';        if(isset($params['sale_status']) && is_numeric($params['sale_status']) && $params['sale_status']>-1){            $sale_sql .= " AND `status` = {$params['sale_status']} ";        }        if(isset($params['sale_id']) && is_numeric($params['sale_id']) && $params['sale_id']>-1){            $sale_sql .= " AND author_id = {$params['sale_id']}";        }        if($sale_sql){            $goods_sale = $this->db->query("SELECT  `goods_id` FROM `t_walmart_goods_sale` WHERE 1=1 ".$sale_sql)->result_array();            $goods_id_arr = array_column($goods_sale, 'goods_id');            $goods_id = $goods_id_arr?$goods_id_arr:[0];            $where .= " AND id IN (".implode(',',array_unique($goods_id)).")";        }        $developer_sql  = '';        if(isset($params['developer_status']) && is_numeric($params['developer_status']) && $params['developer_status']>-1){            $developer_sql .= " AND `status` = {$params['developer_status']} ";        }        if(isset($params['developer_id']) && is_numeric($params['developer_id']) && $params['developer_id']>-1){            $developer_sql .= " AND author_id = {$params['developer_id']}";        }        if($developer_sql){            $goods_developer = $this->db->query("SELECT  `goods_id` FROM `t_walmart_goods_developer` WHERE 1=1 ".$developer_sql)->result_array();            $goods_id_arr = array_column($goods_developer, 'goods_id');            $goods_id = $goods_id_arr?$goods_id_arr:[0];            $where .= " AND id IN (".implode(',',array_unique($goods_id)).")";        }        $currentpage = element('currentPage', $params, 1);        $pagesize = element('pageSize', $params, 10);        $page = ($currentpage - 1) * $pagesize;        $rows  = $this->db->limit($pagesize, $page)->where($where)->order_by('id','desc')->get('t_walmart_goods')->result_array();        $users = $this->db->select('id,username')->get('t_user')->result_array();        $users = array_column($users,'username', 'id');        $count = $this->db->where($where)->count_all_results('t_walmart_goods');        $goods_id = array_column($rows, 'id');;        $goods_sale = [];        $goods_developer = [];        $goods_log = [];        if($goods_id){            $sale_arr = $this->db->where_in('goods_id',$goods_id)->get('t_walmart_goods_sale')->result_array();            foreach($sale_arr as $v){                $v['author_name']   = isset($users[$v['author_id']])?$users[$v['author_id']]:'';                $goods_sale[$v['goods_id']] = $v;              }             $developer_arr = $this->db->where_in('goods_id',$goods_id)->get('t_walmart_goods_developer')->result_array();            foreach($developer_arr as $v){                $v['author_name']   = isset($users[$v['author_id']])?$users[$v['author_id']]:'';                $goods_developer[$v['goods_id']] = $v;              }            $log_arr = $this->db->where_in('goods_id',$goods_id)->get('t_walmart_log')->result_array();            foreach($log_arr as $v){                $v['author_name']   = isset($users[$v['author_id']])?$users[$v['author_id']]:'';                $goods_log[$v['goods_id']."_".$v['type']][] = $v;              }         }        foreach($rows as &$v){            $v['author_name']           = isset($users[$v['author_id']])?$users[$v['author_id']]:'';            $v['last_time']             = !empty($v['last_time'])?date('Y-m-d H:i:s',$v['last_time']):'';            $v['goods_sale']            = isset($goods_sale[$v['id']])?$goods_sale[$v['id']]:['status'=>'','remark'=>''];            $v['goods_developer']       = isset($goods_developer[$v['id']])?$goods_developer[$v['id']]:['status'=>'','remark'=>'','sku'=>''];            $v['goods_log'] = [];            $goods_log_index = [$v['id']."_0",$v['id']."_1"];            if(isset($goods_log[$goods_log_index[0]])){                $v['goods_log']           = $goods_log[$goods_log_index[0]];            }            if(isset($goods_log[$goods_log_index[1]])){                $v['goods_log']           = array_merge($v['goods_log'],$goods_log[$goods_log_index[1]]);            }            $v['shipping_fee'] = $v['shipping_fee']=='Free shipping'?'免邮':$v['shipping_fee'];         }        $data['data'] = $rows;        $data['total'] = intval($count);                echo json_encode($data);        exit;    }    public function editGoodsSale(){        $post = $this->input->post(NULL,true);        if(isset($post['goods_sale'])){            $date = date('Y-m-d H:i:s');            $data['status']                         = $post['goods_sale']['status'];            $data['remark']                         = $post['goods_sale']['remark'];            $data['date']                           = $date;            $data['goods_id']                       = $post['id'];            $data['author_id']                      = $this->userinfo['id'];            if($post['goods_sale']['id']){                $data['updated_at']     = $date;                if($this->db->where(['id'=>$post['goods_sale']['id']])->update('t_walmart_goods_sale',$data)){                    unset($data['updated_at']);                    unset($data['date']);                    $log = $data;                    $log['type'] = 0;                    $log['created_at'] = $date;                    $this->db->insert('t_walmart_log',$log);                    $post['goods_sale'] = $this->db->where(['goods_id'=>$post['id']])->get('t_walmart_goods_sale')->row_array();                    $post['goods_sale']['author_name']      = $this->userinfo['name'];                    $post['goods_log'] = $this->db->query("SELECT  * FROM `t_walmart_log` WHERE goods_id = ".$post['id']." AND type=0")->result_array();;                    re_json($post, 0, '编辑成功');                }else{                    re_json([], 1, '编辑失败');                }            }else{                $data['created_at']     = $date;               if($this->db->insert('t_walmart_goods_sale',$data)){                    unset($data['created_at']);                    unset($data['date']);                    $log = $data;                    $log['type'] = 0;                    $log['created_at'] = $date;                    $this->db->insert('t_walmart_log',$log);                    $post['goods_sale'] = $this->db->where(['goods_id'=>$post['id']])->get('t_walmart_goods_sale')->row_array();;                    $post['goods_sale']['author_name']      = $this->userinfo['name'];                    $post['goods_log'] = $this->db->query("SELECT  * FROM `t_walmart_log` WHERE goods_id = ".$post['id']." AND type=0")->result_array();;                    re_json($post, 0, '新增成功');                }else{                    re_json([], 1, '新增失败');                }            }                    }    }    public function editGoodsDeveloper(){        $post = $this->input->post(NULL,true);        if(isset($post['goods_developer'])){            $date = date('Y-m-d H:i:s');            $data['status']                         = $post['goods_developer']['status'];            $data['remark']                         = $post['goods_developer']['remark'];            $data['sku']                            = $data['status']==2?$post['goods_developer']['sku']:'';            $data['date']                           = $date;            $data['goods_id']                       = $post['id'];            $data['author_id']                      = $this->userinfo['id'];            if($post['goods_developer']['id']){                $data['updated_at']     = $date;                if($this->db->where(['id'=>$post['goods_developer']['id']])->update('t_walmart_goods_developer',$data)){                    unset($data['updated_at']);                    unset($data['date']);                    $log = $data;                    unset($log['sku']);                    $log['type'] =1;                    $log['created_at']  = $date;                    $log['content']     = $data['sku'];                    $this->db->insert('t_walmart_log',$log);                    $post['goods_developer'] = $this->db->where(['goods_id'=>$post['id']])->get('t_walmart_goods_developer')->row_array();                    $post['goods_developer']['author_name']      = $this->userinfo['name'];                    $post['goods_log'] = $this->db->query("SELECT  * FROM `t_walmart_log` WHERE goods_id = ".$post['id']." AND type=1")->result_array();;                    re_json($post, 0, '编辑成功');                }else{                    re_json([], 1, '编辑失败');                }            }else{                $data['created_at']     = $date;               if($id = $this->db->insert('t_walmart_goods_developer',$data)){                    $post['goods_developer']['id']         = $id;                    unset($data['created_at']);                    unset($data['date']);                    $log = $data;                    unset($log['sku']);                    $log['type'] = 1;                    $log['created_at']  = $date;                    $log['content']     = $data['sku'];                    $this->db->insert('t_walmart_log',$log);                    $post['goods_developer'] = $this->db->where(['goods_id'=>$post['id']])->get('t_walmart_goods_developer')->row_array();                    $post['goods_developer']['author_name']      = $this->userinfo['name'];                    $post['goods_log'] = $this->db->query("SELECT  * FROM `t_walmart_log` WHERE goods_id = ".$post['id']." AND type=0")->result_array();;                    re_json($post, 0, '新增成功');                }else{                    re_json([], 1, '新增失败');                }            }                    }    }    public function getSaleList(){        $users = $this->db->select('username,id')->get('t_user')->result_array();        exit(json_encode($users));    }    public function getDeveloperList(){        $users = $this->db->select('username,id')->get('t_user')->result_array();        exit(json_encode($users));    }}